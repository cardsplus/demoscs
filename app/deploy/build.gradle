plugins {
    id 'base'
}

ext.SERVER_IMAGE = rootProject.name + "/server"                   
ext.CLIENT_IMAGE = rootProject.name + "/client"    

task composeUp {
    doLast { 
        println '\nDeploying with latest'
        dockerBuild(SERVER_IMAGE, 'latest', 'server');
        dockerBuild(CLIENT_IMAGE, 'latest', 'client');
        exec {
            executable 'docker-compose'
            args '-p', 'demoscs', '-f', 'compose.yml', 'up', '--detach', '--no-build'
        }
    }
}

task composeStop {
    doLast {
        exec {
            executable 'docker-compose'
            args '-p', 'demoscs', '-f', 'compose.yml', 'stop'
        }
    }
}

task composeDown {
    doLast {
        exec {
            executable 'docker-compose'
            args '-p', 'demoscs', '-f', 'compose.yml', 'down'
        }
    }
}
            
task deployIngress {
    doLast {
        exec {
            executable 'helm'
            args 'repo', 'add', 'ingress-nginx', 'https://kubernetes.github.io/ingress-nginx'
        }
        exec {
            executable 'helm'
            args 'repo', 'update'
        }
        helmInstall('ingress-nginx', 'ingress-nginx/ingress-nginx');
        kubectlDescribeIngress();
    }
}

task undeployIngress {
    doLast {
        helmUninstall('ingress-nginx');
     }
}

task deployDashboard {
    assert new File("${projectDir}/ui/dashboard.yaml").exists()
    doLast {
        kubectlApply('https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml');
        kubectlApply('ui/dashboard.yaml');
     }
}

task undeployDashboard {
    doLast {
        kubectlDelete('https://raw.githubusercontent.com/kubernetes/dashboard/v2.2.0/aio/deploy/recommended.yaml');
     }
}

task createDashboardToken {
    assert new File("${projectDir}/ui/dashboard.yaml").exists()
    doLast {
        def userName = new ByteArrayOutputStream();
        exec {
            executable 'kubectl'
            args '-n', 'kubernetes-dashboard', 'get', 'sa/cluster-admin-user', '-o', 'jsonpath="{.secrets[0].name}"'
            standardOutput = userName
        }
        def userToken = new ByteArrayOutputStream();
        exec {
            executable 'kubectl'
            args '-n', 'kubernetes-dashboard', 'get', 'secret', userName, '-o', 'jsonpath="{.data.token}"'
            standardOutput = userToken
        }
        println '\n' + new String(userToken.toString().decodeBase64());
        println '\nhttp://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/'
     }
}               

task deploy {
    doLast {    
        println '\nDeploying with latest'
        dockerBuild(SERVER_IMAGE, 'latest', 'server');
        dockerBuild(CLIENT_IMAGE, 'latest', 'client');
        kubectlApply('k8s')
    }
}

task undeploy {
    doLast {
        kubectlDelete('k8s')
     }
}

task deployStatus {
    doLast {
        kubectlDescribeIngress();
        kubectlDescribeService('server')
        kubectlDescribeService('client')
    }
}

task updateServer {
    doLast {
        def SHA = versionDetails().gitHash
        println '\nDeploying with ' + SHA
        dockerBuild(SERVER_IMAGE, SHA, 'server');
        kubectlImage(SERVER_IMAGE, SHA, 'server')
    }
}

task deleteServer {
    doLast {
        kubectlDelete('k8s/server.yaml')
     }
}

task updateClient {
    doLast {
        def SHA = versionDetails().gitHash
        println '\nDeploying with ' + SHA
        dockerBuild(CLIENT_IMAGE, SHA, 'client');
        kubectlImage(CLIENT_IMAGE, SHA, 'client')
    }
}

task deleteClient {
    doLast {
        kubectlDelete('k8s/client.yaml')
     }
}

def dockerBuild(String image, String tag, String name) {
    println "\nBuilding docker image '" + image + ":" + tag + "' ..."
    exec {
        workingDir "${projectDir}/../" + name 
        executable 'docker'
        args 'build', '.', \
            '-t', image + ':latest', \
            '-t', image + ':' + tag
    }
}

def kubectlApply(String path) {
    println "\nApplying kubernetes objects from '" + path + "' ..."
    exec {
        executable 'kubectl'
        args 'apply', '-f', path
    }
}

def kubectlImage(String image, String tag, String name) {
    println "\nApplying docker image '" + image + ":" + tag + "' ..."
    exec {
        workingDir "${projectDir}/k8s"
        executable 'kubectl'
        args 'set', 'image', 'deployments/' + name + '-deployment', name + '=' + image + ':' + tag
    }
}

def kubectlDescribeIngress() {
    println "\n"
    exec {
        ignoreExitValue true
        executable 'kubectl'
        args 'describe', 'service', 'ingress-nginx-controller'
    }
}

def kubectlDescribeService(String name) {
    println "\n"
    exec {
        ignoreExitValue true
        executable 'kubectl'
        args 'describe', 'service', name + '-cluster-ip'
    }
}

def kubectlDelete(String path) {
    println "\nDeleting kubernetes objects from '" + path + "' ..."
    exec {
        ignoreExitValue true
        executable 'kubectl'
        args 'delete', '-f', path
    }
}

def helmInstall(String name, String chart) {
    println "\nCreating kubernetes objects from '" + name + "' ..."
    exec {
        executable 'helm'
        args 'install', name, chart
    }
}

def helmUninstall(String name) {
    println "\nDeleting kubernetes objects from '" + name + "' ..."
    exec {
        ignoreExitValue true
        executable 'helm'
        args 'uninstall', name
    }
}
