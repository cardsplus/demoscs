plugins {
    id 'base'
}

task helmLint {
    onlyIf {
        // No helm in CI-Job
        System.env['CI'] == null
    }
    build.dependsOn it
    doLast {
        exec {
            executable 'helm'
            args 'lint'
        }
    }
}

ext.SERVER_IMAGE = rootProject.name + "/server"                   
ext.CLIENT_IMAGE = rootProject.name + "/client"

def dockerBuild(String image, String tag, String name) {
    println "\nBuilding docker image '" + image + ":" + tag + "' ..."
    exec {
        workingDir "${projectDir}/../" + name 
        executable 'docker'
        args 'build', '.', \
            '-t', image + ':latest', \
            '-t', image + ':' + tag
    }
}  

task composeUp {
    doLast { 
        dockerBuild(SERVER_IMAGE, 'latest', 'server');
        dockerBuild(CLIENT_IMAGE, 'latest', 'client');
        exec {
            executable 'docker'
            args 'compose', '-p', rootProject.name, '-f', 'compose.yml', 'up', '--detach', '--no-build'
        }
    }
}

task composeStop {
    doLast {
        exec {
            executable 'docker'
            args 'compose', '-p', rootProject.name, '-f', 'compose.yml', 'stop'
        }
    }
}

task composeDown {
    doLast {
        exec {
            executable 'docker'
            args 'compose', '-p', rootProject.name, '-f', 'compose.yml', 'down'
        }
    }
}

task deploy {
    onlyIf {
        // No helm in CI-Job
        System.env['CI'] == null
    }
    doLast {    
        dockerBuild(SERVER_IMAGE, VERSION, 'server');
        dockerBuild(CLIENT_IMAGE, VERSION, 'client');
    }
    finalizedBy 'install'

}

task install {
    onlyIf {
        // No helm in CI-Job
        System.env['CI'] == null
    }
    doLast {
        exec {
            executable 'helm'
            args 'upgrade', '--install', '--wait', rootProject.name, '.', '--set', 'image.tag=' + VERSION
        }
        kubectlGet('pods')
    }
}

task uninstall {
    onlyIf {
        // No helm in CI-Job
        System.env['CI'] == null
    }
    doLast {
        exec {
            ignoreExitValue true
            executable 'helm'
            args 'uninstall', '--wait', rootProject.name
        }
        kubectlGet('pods')
    }
}

task installIngress {
    onlyIf {
        // No helm in CI-Job
        System.env['CI'] == null
    }
    doLast {
        exec {
            executable 'helm'
            args 'repo', 'add', 'ingress-nginx', 'https://kubernetes.github.io/ingress-nginx'
        }
        exec {
            executable 'helm'
            args 'repo', 'update'
        }
        exec {
            executable 'helm'
            args 'upgrade', '--install', '--wait', 'ingress-nginx', 'ingress-nginx/ingress-nginx'
        }
        kubectlGet('pods')
    }
}

task uninstallIngress {
    onlyIf {
        // No helm in CI-Job
        System.env['CI'] == null
    }
    doLast {
        exec {
            executable 'helm'
            args 'uninstall', '--wait', 'ingress-nginx'
        }
        kubectlGet('pods')
     }
}

def kubectlGet(String type) {
    println "\nRetrieving kubernetes objects of type '" + type + "' ..."
    exec {
        executable 'kubectl'
        args 'get', type
    }
}

task describe {
    doLast {
        kubectlDescribePod('ingress');
        kubectlDescribePod('client')
        kubectlDescribePod('server')
    }
}

def kubectlDescribePod(String name) {
    println "\n"
    exec {
        ignoreExitValue true
        executable 'kubectl'
        args 'describe', 'pod', name
    }
}


task versionCheck() {  
    group = 'versioning'  
    build.dependsOn it
    doLast {
        assert new File("${projectDir}/Chart.yaml")
            .text
            .contains("version: " + VERSION)
    }
}
